# Models {#sec-models}

<!--# Going to take some work for this not to feel super rote.  -->

<!--# I do want some kind of content that's, like, tables of timings for every ___ engine fitted on a bunch of numbers of rows.  -->

::: callout-caution
This chapter still has a long way to go. I'd recommend exploring other portions of the draft in the meantime.
:::

## Tidymodels overhead

<!--# TODO: currently this talks about the difference between CRAN and dev (at the time) packages. rephrase to just focus on the now. -->

\
<!--# also, need to rewrite to fit when `eval_fits` and not otherwise. -->

```{r}
#| label: setup-common-02
#| include: false
source("includes/common.R")
```

```{r}
#| label: setup-02
#| include: false
if (!identical(Sys.getenv("emlwr.eval_fits"), "true")) {
  eval_fits <- FALSE
} else {
  eval_fits <- TRUE
}

if (!eval_fits) {
  data_files <- list.files("data/02-models", full.names = TRUE)
  data_files <- data_files[grepl("\\.Rda", data_files)]
  loaded <- lapply(data_files, load)
}
```

While the tidymodels team develops the infrastructure that users interact with directly, under the hood, we send calls out to other people's modeling packages—or modeling *engines*—that provide the actual implementations that estimate parameters, generate predictions, etc. The process looks something like this:

![A graphic representing the tidymodels interface. In order, step 1 "translate", step 2 "call", and step 3 "translate", outline the process of translating from the standardized tidymodels interface to an engine's specific interface, calling the modeling engine, and translating back to the standardized tidymodels interface. Step 1 and step 3 are in green, while step 2 is in orange.](figures/translate_diagram.png)

When thinking about the time allotted to each of the three steps above, we refer to the "translate" steps in green as the *tidymodels overhead*. The time it takes to "translate" interfaces in steps **1)** and **3)** is within our control, while the time the modeling engine takes to do it's thing in step **2)** is not.

Let's demonstrate with an example classification problem. Generating some random data:

```{r}
#| label: simulate-data
set.seed(1)
d <- simulate_classification(n_rows = 100)

d
```

...we'd like to model the `class` using the remainder of the variables in this dataset using a logistic regression. We can using the following code to do so:

```{r}
#| label: fit-glm
fit(logistic_reg(), class ~ ., d)
```

The default engine for a logistic regression in tidymodels is `stats::glm()`. So, in the style of the above graphic, this code:

1)  Translates the tidymodels code, which is consistent across engines, to the format that is specific to the chosen engine. In this case, there's not a whole lot to do: it passes the preprocessor as `formula`, the data as `data`, and picks a `family` of `stats::binomial`.
2)  Calls `stats::glm()` and collects its output.
3)  Translates the output of `stats::glm()` back into a standardized model fit object.

Again, we can control what happens in steps **1)** and **3)**, but step **2)** belongs to the `stats` package.

The time that steps **1)** and **3)** take is relatively independent of the dimensionality of the training data. That is, regardless of whether we train on one hundred or a million data points, *our* code (as in, the translation) takes about the same time to run. Regardless of training set size, our code pushes around small, relational data structures to determine how to correctly interface with a given engine. The time it takes to run step **2)**, though, depends almost completely on the size of the data. Depending on the modeling engine, modeling 10 times as much data could result in step **2)** taking twice as long, or 10x as long, or 100x as long as the original fit.

So, while the *absolute* time allotted to steps **1)** and **3)** is fixed, the *portion* of total time to fit a model with tidymodels that is "overhead" depends on how quick the engine code itself is. How quick is a logistic regression with `glm()` on 100 data points?

```{r}
#| label: bench-mark-glm
bench::mark(
  fit = glm(class ~ ., family = binomial, data = d)
) %>% 
  select(expression, median)
```

About a millisecond. That means that, if the tidymodels overhead is one second, we've made this model fit a thousand times slower!

In practice, the overhead here has hovered around a millisecond or two for the last couple years, and machine learning practitioners usually fit much more computationally expensive models than a logistic regression on 100 data points. You'll just have to believe me on that second point. Regarding the first:

```{r}
bm_logistic_reg <- 
  bench::mark(
    parsnip = fit(logistic_reg(), class ~ ., d),
    stats = glm(class ~ ., family = binomial, data = d),
    check = FALSE
  )
```

Remember that the first expression calls the second one, so the increase in time from the second to the first is the "overhead." In this case, it's `r as.numeric(bm_logistic_reg$median[1] - bm_logistic_reg$median[2]) * 1000` milliseconds, or `r round(1 - as.numeric(bm_logistic_reg$median[2] / bm_logistic_reg$median[1]), 3) * 100`% of the total elapsed time.

So, to fit a boosted tree model on 1,000,000 data points, step **2)** might take a few seconds. Steps **1)** and **3)** don't care about the size of the data, so they still take a few thousandths of a second. No biggie—the overhead is negligible. Let's quickly back that up by fitting boosted tree models on simulated datasets of varying sizes, once with the XGBoost interface and once with parsnip's wrapper around it.

```{r}
#| echo: false
#| eval: !expr eval_fits
# default xgboost params from parsnip
params <- list(eta = 0.3, max_depth = 6, gamma = 0, colsample_bytree = 1, 
    colsample_bynode = 1, min_child_weight = 1, subsample = 1)

bm_boost_tree <- 
  bench::press(
    rows = 10^(2:6),
    {
      set.seed(1)
      d <- simulate_classification(rows)
      bt <- boost_tree(mode = "classification")
      bench::mark(
        parsnip = fit(bt, class ~ ., d),
        xgboost = {
          d_mtrx <- model.matrix(class ~ ., d)
          d_xgb <- parsnip:::as_xgb_data(d_mtrx, d[[1]])
          xgboost::xgb.train(params, data = d_xgb$data, nrounds = 15)
        },
        check = FALSE
      )
    }
  )
```

```{r}
#| label: save-bench-press-boost-ree
#| include: false
if (eval_fits) {
  press_boost_tree <- trim_bench_mark(press_boost_tree)
  qsave(press_boost_tree, file = "data/02-models/press_boost_tree.rds")
} else {
  press_boost_tree <- qread(file = "data/02-models/press_boost_tree.rds")
}
```

```{r}
#| echo: false
#| label: "plot-press-boost-tree"
#| fig-cap: "TODO: write caption"
press_boost_tree %>%
  mutate(expression = as.character(expression)) %>%
  ggplot() +
  aes(x = rows, y = median, color = expression, group = expression) +
  scale_x_log10() +
  geom_line() +
  labs(x = "Number of Rows", y = "Elapsed Time")
```

This graph shows the gist of tidymodels' overhead for modeling engines: as dataset size and model complexity grow larger, model fitting and prediction take up increasingly large proportions of the total evaluation time.

@sec-speedy-go showed a number of ways users can cut down on the evaluation time of their tidymodels code. Making use of parallelism, reducing the total number of model fits needed to search a given grid, and carefully constructing that grid to search over are all major parts of the story

<!--# should this chapter go after everything else? -->

## Benchmarks

### Linear models

### Decision trees

### Boosted trees

XGBoost and LightGBM – comparison timings for the same thing but from the Python interface?

### Random forests

### Support vector machines
